import { supabase } from './supabase';
import { z } from 'zod';

// Validation schemas
const siteSchema = z.object({
  domain: z.string().url(),
  name: z.string().min(1),
});

const summarySchema = z.object({
  url: z.string().url(),
  title: z.string().min(1),
  originalContent: z.string().min(1),
});

// API functions
export const api = {
  sites: {
    async create(data: z.infer<typeof siteSchema>) {
      const { data: site, error } = await supabase
        .from('sites')
        .insert([data])
        .select()
        .single();

      if (error) throw error;
      return site;
    },

    async list() {
      const { data: sites, error } = await supabase
        .from('sites')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      return sites;
    },

    async get(id: string) {
      const { data: site, error } = await supabase
        .from('sites')
        .select('*')
        .eq('id', id)
        .single();

      if (error) throw error;
      return site;
    },
  },

  summaries: {
    async create(siteId: string, data: z.infer<typeof summarySchema>) {
      const { data: summary, error } = await supabase
        .from('summaries')
        .insert([{
          site_id: siteId,
          url: data.url,
          title: data.title,
          original_content: data.originalContent,
          summary: '', // Will be generated by AI
          highlights: [],
        }])
        .select()
        .single();

      if (error) throw error;
      return summary;
    },

    async list(siteId: string) {
      const { data: summaries, error } = await supabase
        .from('summaries')
        .select('*')
        .eq('site_id', siteId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      return summaries;
    },

    async incrementViews(id: string) {
      const { error } = await supabase.rpc('increment_summary_views', {
        summary_id: id
      });

      if (error) throw error;
    },
  },
};